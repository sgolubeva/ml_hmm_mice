11/19/23
Installed PsyTrack into the ssm enviroment with the following command:
pip install psytrack
 The goal is to compare Psytrack weights with the weights obtained from the GLM-HMM model per each 
 trial:
the way to calculate GLM-HMM weights is to multiply the posterior probability by the weights at each trial

Plan:

1. See if I can plot tho choice and input data generated by the GLM-HMM with PsyTrack
Made a new python file called psytrack_glmhmm_weight_compar.py

wrote a script psytrack_glmhmm_weight_compar.py
I genereate choice and inpute data with generative GLM-HMM and feed these data into psytrack

psytrack model takes three dictionaries: data dictionary containing choice and input data, weights
dictionary containing names of the inputs from the data dictionary and bias, and hyper dictionary.

I think the hardest part here is the weights dictionary because I still don't exaxtly know what should
go in it. 
This is an example from the authors:
weights = {'bias': 1,  # a special key. They don't explain what this key does or mean I kept it the same
           's1': 1,    # use only the first column of s1 from inputs 
           's2': 1}  # use only the first column of s2 from inputs

the dictionary I came up with:
    weights = {'bias': 1,
               'inpt1': 1} # use the first column in the inpt1 
My inpt1 has two columns: one stimulus values generated by the GLM-HMM and the second shifted stimulus 
values. I shifted them because the original notebook recommended that. They are shifted in the following
way: if the first column has these values: (0, 1, 2, 3) the second column will look like this:
(0, 0, 1, 2)

hyper dictionary description from the authors:
`hyper` is a dictionary that indicates what hyperparameters your model will have. There are 3 types:

1) `sigma` : required, controls trial-to-trial variability.

2) `sigInit` : optional, controls the variability on the very first trial (e.g. how close weights must initialize to 0). It is often best to include this hyperparameter and set it to a high value, as you often prefer your data to determine where the weights ought to initialize. Otherwise, `sigInit` will be set equal to `sigma`.

3) `sigDay` : optional, controls variability between sessions (e.g. between the last trial of one session and the first trial of the next session). If this key is included, then your dataset must also have the key `dayLength` (as described above), to indicate the trials where the `sigDay` variability should supercede the standard `sigma` variability.

I used the same hyper dictionary, the authors use in the paper

hyper= {'sigInit': 2**4.,      # Set to a single, large value for all weights. Will not be optimized further.
        'sigma': [2**-4.]*K,   # Each weight will have it's own sigma optimized, but all are initialized the same
        'sigDay': None}        # Indicates that session boundaries will be ignored in the optimization

optList description from the authors:
`optList` is a list of the subset of hyperparameters in `hyper` that you wish to optimize over in your model. It is typically unnecessary to optimize over `sigInit` -- a single, large, fixed value is usually best. Thus, there are 4 reasonable ways to specify `optList`:

1) `optList = []` : this means that none of the hyperparameters in `hyper` will be optimized. The optimizer will find the best set of weight trajectories given the fixed hyperparameter values specified.

2) `optList = ['sigma']` : only the `sigma` hyperparameter will be optimized (as we will do below). If `sigDay` is included in `hyper`, then this means that the model _will_ include `sigDay`, but that the initial value specified will not be optimized.

3) `optList = ['sigDay']` : only the `sigDay` hyperparameter will be optimized, while the `sigma` hyperparameter remains fixed.

4) `optList = ['sigma', 'sigDay']` : both the `sigma` and `sigDay` hyperparameters will be optimized.

I used optList = ['sigma'] # optimize over sigma parameter 


I tried to fit psytrack with 'inpt1' : 1 or 'inpt1' : 2 to use either 1 or 2 columns for fitting
I am not entirely shute what the difference is.

After fitting, I plotted the results. The weight trajectory variable is wMode and I ended up with 
two lines: one for inputs, another for bias

The line to run my script:
python psytrack_glmhmm_weight_compar.py -n 10 -se 1 -o test

Encountered exception thrown with psytrack source code. Used the following line to debug it:
goes into debugger if an exception is thrown
python -m ipdb -c continue psytrack_glmhmm_weight_compar.py -n 11 -se 1 -o test



if git authentification fais in vs code

/projects/bgmp/shared/groups/2023/ml-mice/shared/BW046_behavior_data/BW046_choices.npy
/projects/bgmp/shared/groups/2023/ml-mice/shared/BW046_behavior_data/BW046_inpts.npy
/projects/bgmp/shared/groups/2023/ml-mice/shared/BW046_behavior_data/BW046_reaction_times.npy


python plot_tr_ts.py -it1 /projects/bgmp/shared/groups/2023/ml-mice/sgolubev/ml_hmm_mice/SSM_Train/csv/binary_choice/likel_data_test_BW051_n10_binary.csv -it2 /projects/bgmp/shared/groups/20
23/ml-mice/sgolubev/ml_hmm_mice/SSM_Train/csv/binary_choice/lekel_data_train_BW051_n10_binary.csv -e BW051_10